apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
//apply plugin: 'war'

javadoc {
    options.encoding = "UTF-8"
}


sourceCompatibility = 1.7
//targetCompatability = 1.7

def defaultEncoding = 'UTF-8'

[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

repositories {
	maven {
        //url "http://ci.paipaioa.com/nexus/content/groups/public/"
    }

	//mavenLocal()
	mavenCentral()
		
}

configurations {
	intTestCompile {
		extendsFrom testCompile
	}

	intTestRuntime{
		extendsFrom intTestCompile , testRuntime
	}
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}

		resources {
			srcDir 'src/main/resources'
		}			

	}

	unitTest {
		java {
			srcDir 'src/unit.test/java'
		}

		resources {
			srcDir 'src/unit.test/resources'
		}

		compileClasspath = sourceSets.main.output + configurations.testCompile
		runtimeClasspath = output + compileClasspath
	}


	intTest {
		java {
			srcDir 'src/int.test/java'
		}

		resources {
			srcDir 'src/int.test/resources'
		}

		compileClasspath = sourceSets.main.output + configurations.testCompile 
		runtimeClasspath = output + compileClasspath 
	}
}

clean {
	delete 'dist'
	delete 'build'
}


List apache_commons = [
    "commons-logging:commons-logging:1.2",
    "org.apache.commons:commons-collections4:4.0",
    "commons-beanutils:commons-beanutils:1.9.2",
    "org.apache.commons:commons-lang3:3.4",
    //"commons-lang:commons-lang:2.6", 
    "commons-codec:commons-codec:1.10",
    "commons-cli:commons-cli:1.3.1"
]


List logger = [
    'org.apache.logging.log4j:log4j-api:2.4.1',
    'org.apache.logging.log4j:log4j-core:2.4.1',
    'org.apache.logging.log4j:log4j-slf4j-impl:2.4.1',
    'org.apache.logging.log4j:log4j-web:2.4.1'
]

List lmax = [
    'com.lmax:disruptor:3.3.2'
]

List junit = [
	"junit:junit:4.12"
]

List mock = [
	"org.mockito:mockito-all:1.10.19",
	"org.powermock:powermock-module-junit4:1.6.3",
	"org.powermock:powermock-api-mockito:1.6.3",
	'org.hamcrest:hamcrest-all:1.3'

]

List jackson = [
	'com.fasterxml.jackson.core:jackson-core:2.6.3',
	'com.fasterxml.jackson.core:jackson-databind:2.6.3',
	'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.6.3'
]

List guava = [
	'com.google.guava:guava:18.0'
]

List jedis = [
    'redis.clients:jedis:2.7.3'
]

List mybatis = [
	'org.mybatis:mybatis:3.3.0',
	'org.mybatis:mybatis-spring:1.2.3'
]

List h2 =[
	'com.h2database:h2:1.4.190'
]

List druid = [
	'com.alibaba:druid:1.0.16'
]

List mysql = [
    'mysql:mysql-connector-java:5.1.37'
]

def spring_version="4.2.3.RELEASE"
List spring_framework = [
		"org.springframework:spring-core:$spring_version",
		"org.springframework:spring-beans:$spring_version",
		"org.springframework:spring-aop:$spring_version",
		"org.springframework:spring-expression:$spring_version",
		"org.springframework:spring-instrument:$spring_version",
		"org.springframework:spring-context:$spring_version",
		"org.springframework:spring-jdbc:$spring_version",
		"org.springframework:spring-context-support:$spring_version",
		//"org.springframework:spring-web:$spring_version",
		"org.springframework:spring-orm:$spring_version",
		"org.springframework:spring-aspects:$spring_version",
		//"org.springframework:spring-webmvc:$spring_version",
		"org.springframework:spring-test:$spring_version"
]

def httpclient_version="4.5.1"
List httpclient = [
	 "org.apache.httpcomponents:httpclient:$httpclient_version",
	 "org.apache.httpcomponents:httpmime:$httpclient_version"
]

File localDepLibDir = file('./deplib')
File localLibDir = file('./lib')

dependencies {
	compile spring_framework,mysql,jackson,httpclient,apache_commons
    testCompile junit
	//testCompile spring_framework,mysql,junit,mock,httpclient,apache_commons
	//runtime spring_framework,mysql,jackson,httpclient,apache_commons
}

task copyJars(type: Copy) {
		from configurations.runtime
		into 'lib' // 目标位置
}

task intTest(type: Test,dependsOn: assemble) {
	description = "run int tests"
	testClassesDir = project.sourceSets.intTest.output.classesDir
	classpath = project.sourceSets.intTest.runtimeClasspath + files('src/main/classpath') + files('src/main/webapp/WEB-INF')


	//systemProperties['jar.path'] = jar.archivePath

	// enable TestNG support (default is JUnit)
	//useTestNG()

	// set a system property for the test JVM(s)
	//systemProperty 'some.prop', 'value'

	// explicitly include or exclude tests
	include 'cn/somesite/**/*IntTest*' 
	//exclude 'org/boo/**'

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

	// set JVM arguments for the test JVM(s)
	//jvmArgs '-XX:MaxPermSize=64m'

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
	 logger.lifecycle("Running test: " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
	 logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}


	doFirst {
		copy {
			from 'src/main/resources'
			into 'build/classes/intTest'
			include '**/*.xml'
		}
	}
}


task unitTest(type: Test, dependsOn: assemble) {
	description = "run unit tests"
	testClassesDir = project.sourceSets.unitTest.output.classesDir
	classpath = project.sourceSets.unitTest.runtimeClasspath
	//systemProperties['jar.path'] = jar.archivePath

	// enable TestNG support (default is JUnit)
	//useTestNG()

	// set a system property for the test JVM(s)
	//systemProperty 'some.prop', 'value'

	// explicitly include or exclude tests
	include 'cn/somesite/**/*UnitTest*'
	//exclude 'org/boo/**'

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

	// set JVM arguments for the test JVM(s)
	//jvmArgs '-XX:MaxPermSize=64m'

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
	 logger.lifecycle("Running test: " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
	 logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}


  
}

//build.dependsOn intTest
compileJava.dependsOn clean
compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

processResources {
	//srcDirs  = file(new File('src/main/resources/app'))
}



jar {

    destinationDir file('dist')
    baseName 'client'
    //from sourceSets.main.output
    //exclude('cn/somesite/queue/integration/dao/QueueDao**')
    //exclude('cn/somesite/queue/integration/dao/impl/QueueRedisDao**')

}


project.eclipseClasspath.doFirst {
   // delay adding whenMerged till the entryAttributes are added (must be the last whenMerged)
   project.eclipse.classpath.file.whenMerged { classpath ->
       def includeDeps = project.configurations.getByName('runtime').collect {f -> f.absolutePath } as Set
       classpath.entries.each { cp ->
           if(cp instanceof org.gradle.plugins.ide.eclipse.model.Library) {
               def include = includeDeps.contains(cp.path)
               def attr = 'org.eclipse.jst.component.dependency'
               if(!include) {
                   cp.entryAttributes.remove(attr)
               }
           }
       }
   }
}



//uploadArchives {
//	repositories {
//		flatDir(dirs: file('dist'))
//	}
//}


test {
  // enable TestNG support (default is JUnit)
  //useTestNG()

  // set a system property for the test JVM(s)
  //systemProperty 'some.prop', 'value'

  // explicitly include or exclude tests
  include 'cn/somesite/**/*UnitTest*'
  //exclude 'org/boo/**'

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "512m"

  // set JVM arguments for the test JVM(s)
  jvmArgs '-XX:MaxPermSize=64m'

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}

war {
	//from(files('src/main/classpath')) {
	//	include '*.*'
	//	into('WEB-INF/classes/')
	//}
}


uploadArchives {
	repositories {
		flatDir(dirs: file('dist'))
		mavenDeployer {
			repository(url:'http://10.6.222.54:8081/nexus/content/repositories/releases/'){
				authentication(userName: 'deployment', password: 'deployment123')
			}
			pom.groupId = 'cn.somesite.mumble'
			pom.version = '0.9'
			pom.artifactId = 'client.poc'
		}
	}

	
}

